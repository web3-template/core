// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: transaction/v1/transaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Transaction_V1_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Transaction_V1_Transaction.Metadata {
    get {return _metadata ?? Transaction_V1_Transaction.Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {self._metadata = nil}

  var contract: String = String()

  var network: UInt32 = 0

  var data: Transaction_V1_Transaction.OneOf_Data? = nil

  var safeTransferFrom: Transaction_V1_Transaction.ERC1155.SafeTransferFrom {
    get {
      if case .safeTransferFrom(let v)? = data {return v}
      return Transaction_V1_Transaction.ERC1155.SafeTransferFrom()
    }
    set {data = .safeTransferFrom(newValue)}
  }

  var safeBatchTransferFrom: Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom {
    get {
      if case .safeBatchTransferFrom(let v)? = data {return v}
      return Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom()
    }
    set {data = .safeBatchTransferFrom(newValue)}
  }

  var safeApprovalForAll: Transaction_V1_Transaction.ERC1155.SetApprovalForAll {
    get {
      if case .safeApprovalForAll(let v)? = data {return v}
      return Transaction_V1_Transaction.ERC1155.SetApprovalForAll()
    }
    set {data = .safeApprovalForAll(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case safeTransferFrom(Transaction_V1_Transaction.ERC1155.SafeTransferFrom)
    case safeBatchTransferFrom(Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom)
    case safeApprovalForAll(Transaction_V1_Transaction.ERC1155.SetApprovalForAll)

  #if !swift(>=4.1)
    static func ==(lhs: Transaction_V1_Transaction.OneOf_Data, rhs: Transaction_V1_Transaction.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.safeTransferFrom, .safeTransferFrom): return {
        guard case .safeTransferFrom(let l) = lhs, case .safeTransferFrom(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.safeBatchTransferFrom, .safeBatchTransferFrom): return {
        guard case .safeBatchTransferFrom(let l) = lhs, case .safeBatchTransferFrom(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.safeApprovalForAll, .safeApprovalForAll): return {
        guard case .safeApprovalForAll(let l) = lhs, case .safeApprovalForAll(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  struct ERC1155 {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct SafeTransferFrom {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var from: String = String()

      var to: String = String()

      var id: UInt64 = 0

      var value: UInt64 = 0

      var data: Data = Data()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct SafeBatchTransferFrom {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var from: String = String()

      var to: String = String()

      var ids: [UInt64] = []

      var values: [UInt64] = []

      var data: Data = Data()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct SetApprovalForAll {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var `operator`: String = String()

      var approved: Bool = false

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}
  }

  struct Metadata {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hash: String = String()

    var date: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_date = newValue}
    }
    /// Returns true if `date` has been explicitly set.
    var hasDate: Bool {return self._date != nil}
    /// Clears the value of `date`. Subsequent reads from it will return its default value.
    mutating func clearDate() {self._date = nil}

    var reverted: String {
      get {return _reverted ?? String()}
      set {_reverted = newValue}
    }
    /// Returns true if `reverted` has been explicitly set.
    var hasReverted: Bool {return self._reverted != nil}
    /// Clears the value of `reverted`. Subsequent reads from it will return its default value.
    mutating func clearReverted() {self._reverted = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _reverted: String? = nil
  }

  init() {}

  fileprivate var _metadata: Transaction_V1_Transaction.Metadata? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Transaction_V1_Transaction: @unchecked Sendable {}
extension Transaction_V1_Transaction.OneOf_Data: @unchecked Sendable {}
extension Transaction_V1_Transaction.ERC1155: @unchecked Sendable {}
extension Transaction_V1_Transaction.ERC1155.SafeTransferFrom: @unchecked Sendable {}
extension Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom: @unchecked Sendable {}
extension Transaction_V1_Transaction.ERC1155.SetApprovalForAll: @unchecked Sendable {}
extension Transaction_V1_Transaction.Metadata: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "transaction.v1"

extension Transaction_V1_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Transaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "contract"),
    3: .same(proto: "network"),
    4: .standard(proto: "safe_transfer_from"),
    5: .standard(proto: "safe_batch_transfer_from"),
    6: .standard(proto: "safe_approval_for_all"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.network) }()
      case 4: try {
        var v: Transaction_V1_Transaction.ERC1155.SafeTransferFrom?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .safeTransferFrom(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .safeTransferFrom(v)
        }
      }()
      case 5: try {
        var v: Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .safeBatchTransferFrom(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .safeBatchTransferFrom(v)
        }
      }()
      case 6: try {
        var v: Transaction_V1_Transaction.ERC1155.SetApprovalForAll?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .safeApprovalForAll(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .safeApprovalForAll(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 2)
    }
    if self.network != 0 {
      try visitor.visitSingularUInt32Field(value: self.network, fieldNumber: 3)
    }
    switch self.data {
    case .safeTransferFrom?: try {
      guard case .safeTransferFrom(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .safeBatchTransferFrom?: try {
      guard case .safeBatchTransferFrom(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .safeApprovalForAll?: try {
      guard case .safeApprovalForAll(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transaction_V1_Transaction, rhs: Transaction_V1_Transaction) -> Bool {
    if lhs._metadata != rhs._metadata {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.network != rhs.network {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transaction_V1_Transaction.ERC1155: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Transaction_V1_Transaction.protoMessageName + ".ERC1155"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transaction_V1_Transaction.ERC1155, rhs: Transaction_V1_Transaction.ERC1155) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transaction_V1_Transaction.ERC1155.SafeTransferFrom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Transaction_V1_Transaction.ERC1155.protoMessageName + ".SafeTransferFrom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "id"),
    4: .same(proto: "value"),
    5: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 3)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transaction_V1_Transaction.ERC1155.SafeTransferFrom, rhs: Transaction_V1_Transaction.ERC1155.SafeTransferFrom) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Transaction_V1_Transaction.ERC1155.protoMessageName + ".SafeBatchTransferFrom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "ids"),
    4: .same(proto: "values"),
    5: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.ids) }()
      case 4: try { try decoder.decodeRepeatedUInt64Field(value: &self.values) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.ids, fieldNumber: 3)
    }
    if !self.values.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.values, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom, rhs: Transaction_V1_Transaction.ERC1155.SafeBatchTransferFrom) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.values != rhs.values {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transaction_V1_Transaction.ERC1155.SetApprovalForAll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Transaction_V1_Transaction.ERC1155.protoMessageName + ".SetApprovalForAll"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operator"),
    2: .same(proto: "approved"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.`operator`) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.approved) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.`operator`.isEmpty {
      try visitor.visitSingularStringField(value: self.`operator`, fieldNumber: 1)
    }
    if self.approved != false {
      try visitor.visitSingularBoolField(value: self.approved, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transaction_V1_Transaction.ERC1155.SetApprovalForAll, rhs: Transaction_V1_Transaction.ERC1155.SetApprovalForAll) -> Bool {
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.approved != rhs.approved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transaction_V1_Transaction.Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Transaction_V1_Transaction.protoMessageName + ".Metadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "date"),
    3: .same(proto: "reverted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._date) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._reverted) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    try { if let v = self._date {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._reverted {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transaction_V1_Transaction.Metadata, rhs: Transaction_V1_Transaction.Metadata) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs._date != rhs._date {return false}
    if lhs._reverted != rhs._reverted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
